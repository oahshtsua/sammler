// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed.sql

package data

import (
	"context"
	"database/sql"

	"github.com/oahshtsua/sammler/internal/syndication"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (
    title,
    subtitle,
    feed_url,
    site_url,
    type,
    updated_at,
    checked_at
)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, title, subtitle, feed_url, site_url, type, disabled, checked_at, updated_at
`

type CreateFeedParams struct {
	Title     string
	Subtitle  sql.NullString
	FeedUrl   string
	SiteUrl   string
	Type      syndication.FeedType
	UpdatedAt string
	CheckedAt string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.Title,
		arg.Subtitle,
		arg.FeedUrl,
		arg.SiteUrl,
		arg.Type,
		arg.UpdatedAt,
		arg.CheckedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Subtitle,
		&i.FeedUrl,
		&i.SiteUrl,
		&i.Type,
		&i.Disabled,
		&i.CheckedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE
FROM feeds
WHERE id = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT id, title, subtitle, feed_url, site_url, type, disabled, checked_at, updated_at
FROM feeds
WHERE feeds.id = ?
`

func (q *Queries) GetFeed(ctx context.Context, id int64) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Subtitle,
		&i.FeedUrl,
		&i.SiteUrl,
		&i.Type,
		&i.Disabled,
		&i.CheckedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, title, subtitle, feed_url, site_url, type, disabled, checked_at, updated_at
FROM feeds
ORDER BY title
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Subtitle,
			&i.FeedUrl,
			&i.SiteUrl,
			&i.Type,
			&i.Disabled,
			&i.CheckedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedRead = `-- name: MarkFeedRead :exec
UPDATE entries
SET read = 1
WHERE feed_id = ?
`

func (q *Queries) MarkFeedRead(ctx context.Context, feedID int64) error {
	_, err := q.db.ExecContext(ctx, markFeedRead, feedID)
	return err
}
