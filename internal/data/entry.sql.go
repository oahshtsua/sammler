// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entry.sql

package data

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :exec
INSERT INTO entries (
    feed_id,
    title,
    author,
    content,
    external_url,
    published_at,
    created_at
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEntryParams struct {
	FeedID      int64
	Title       string
	Author      sql.NullString
	Content     string
	ExternalUrl string
	PublishedAt string
	CreatedAt   string
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) error {
	_, err := q.db.ExecContext(ctx, createEntry,
		arg.FeedID,
		arg.Title,
		arg.Author,
		arg.Content,
		arg.ExternalUrl,
		arg.PublishedAt,
		arg.CreatedAt,
	)
	return err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries
WHERE id = ?
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT feeds.title as feed_title, entries.id, entries.feed_id, entries.title, entries.author, entries.content, entries.external_url, entries.published_at, entries.read, entries.starred, entries.created_at
FROM entries
JOIN feeds
    ON entries.feed_id = feeds.id
WHERE entries.id = ?
`

type GetEntryRow struct {
	FeedTitle   string
	ID          int64
	FeedID      int64
	Title       string
	Author      sql.NullString
	Content     string
	ExternalUrl string
	PublishedAt string
	Read        int64
	Starred     int64
	CreatedAt   string
}

func (q *Queries) GetEntry(ctx context.Context, id int64) (GetEntryRow, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i GetEntryRow
	err := row.Scan(
		&i.FeedTitle,
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.ExternalUrl,
		&i.PublishedAt,
		&i.Read,
		&i.Starred,
		&i.CreatedAt,
	)
	return i, err
}

const getFeedEntries = `-- name: GetFeedEntries :many
SELECT feeds.title as feed_title, entries.id, entries.feed_id, entries.title, entries.author, entries.content, entries.external_url, entries.published_at, entries.read, entries.starred, entries.created_at
FROM entries
JOIN feeds
    ON entries.feed_id = feeds.id
WHERE feed_id = ?
ORDER BY published_at DESC
`

type GetFeedEntriesRow struct {
	FeedTitle   string
	ID          int64
	FeedID      int64
	Title       string
	Author      sql.NullString
	Content     string
	ExternalUrl string
	PublishedAt string
	Read        int64
	Starred     int64
	CreatedAt   string
}

func (q *Queries) GetFeedEntries(ctx context.Context, feedID int64) ([]GetFeedEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedEntries, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedEntriesRow
	for rows.Next() {
		var i GetFeedEntriesRow
		if err := rows.Scan(
			&i.FeedTitle,
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Author,
			&i.Content,
			&i.ExternalUrl,
			&i.PublishedAt,
			&i.Read,
			&i.Starred,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadEntries = `-- name: GetUnreadEntries :many
SELECT feeds.title AS feed_title, entries.id, entries.feed_id, entries.title, entries.author, entries.content, entries.external_url, entries.published_at, entries.read, entries.starred, entries.created_at
FROM entries
JOIN feeds
    ON entries.feed_id = feeds.id
WHERE read = 0
ORDER BY published_at DESC
`

type GetUnreadEntriesRow struct {
	FeedTitle   string
	ID          int64
	FeedID      int64
	Title       string
	Author      sql.NullString
	Content     string
	ExternalUrl string
	PublishedAt string
	Read        int64
	Starred     int64
	CreatedAt   string
}

func (q *Queries) GetUnreadEntries(ctx context.Context) ([]GetUnreadEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnreadEntriesRow
	for rows.Next() {
		var i GetUnreadEntriesRow
		if err := rows.Scan(
			&i.FeedTitle,
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Author,
			&i.Content,
			&i.ExternalUrl,
			&i.PublishedAt,
			&i.Read,
			&i.Starred,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEntriesRead = `-- name: MarkEntriesRead :exec
UPDATE entries
SET read = 1
WHERE read = 0
`

func (q *Queries) MarkEntriesRead(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, markEntriesRead)
	return err
}

const markEntryRead = `-- name: MarkEntryRead :exec
UPDATE entries
SET read = 1
WHERE id = ?
`

func (q *Queries) MarkEntryRead(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markEntryRead, id)
	return err
}
